import datetime as dt


class Record:
    def __init__(self, amount, comment, date=''):
        self.amount = amount
        self.date = (
            # Молодец, что используешь тернарную условную операцию, однако
            # разрыв логических операторов - не самый удачный способ переноса
            # строки. "что-то ЕСЛИ НЕ что-то" лучше бы считывалось в одной
            # строчке :)

            # nit: Обрати внимание, как визуально это считывается
            # присвоение значения твоей переменной. Мне кажется, что тернарная
            # условная операция только усложняет чтение кода в этой ситуации.
            dt.datetime.now().date() if
            not
            date else dt.datetime.strptime(date, '%d.%m.%Y').date())
        self.comment = comment


class Calculator:
    def __init__(self, limit):
        self.limit = limit
        self.records = []

    def add_record(self, record):
        self.records.append(record)

    def get_today_stats(self):
        today_stats = 0
        # Здесь мы должны использовать имя переменной Record с
        # маленькой буквы, так как мы обращаемся к конкретному экземпляру
        # класса, а не инициируем новый экземпляр.
        for Record in self.records:
            # В таком случае сегодняшняя дата у тебя будет вычисляться
            # столько раз, сколько записей за сегодня было внесено в
            # калькулятор. Подумай, как можно этого избежать :)
            if Record.date == dt.datetime.now().date():
                # Пайтон позволяет увеличивать переменную на какое-то значение
                # с помощью специального оператора "+=". Это избавит от
                # необходимости дважды писать today_stats.

                # nit: На самом деле, это место кода можно сделать намного
                # лаконичнее и красивее! Для этого тебе нужно будет
                # познакомиться с List comprehension и встроенной функцией
                # .sum(). С помощью первого ты сможешь создать список по
                # условию в одну строчку, а с помощью второго проссумировать
                # каждый элемент этого списка.
                today_stats = today_stats + Record.amount
        return today_stats

    def get_week_stats(self):
        week_stats = 0
        # Молодец, что присвоил значение переменной до вхождения в цикл.
        today = dt.datetime.now().date()
        # nit: здесь также можно применить list compression и .sum()
        for record in self.records:
            if (
                # Это место можно упростить, с помощью сравнения трех
                # элементов без and. Какое-то число должно быть одновременно
                # меньше 7 и больше или равно нулю. Подсказка: А > Б > В :)

                # Логические операторы - это первое место, где мы совершаем
                # ошибки в коде. Поэтому их лучше максимально упрощать,
                # например, убрав вычисления за этот блок.
                (today - record.date).days < 7 and
                (today - record.date).days >= 0
            ):
                # Молодец, что используешь этот оператор для увеличения
                # переменной.
                week_stats += record.amount
        return week_stats


class CaloriesCalculator(Calculator):
    # Если возникает необходимость прокомментировать что делает функция -
    # лучше использовать docstrings. Это позволит получать доступ к
    # описанию функции из IDE, а также из самого кода, с помощью foo.__doc__
    def get_calories_remained(self):  # Получает остаток калорий на сегодня
        # Однобуквенные переменные наш самый злейший враг :) постарайся давать
        # названия переменным такими, которые отвечают на вопрос "что это?"
        x = self.limit - self.get_today_stats()
        if x > 0:
            # В требованиях к коду студентов, сказано, что бэкслеши для
            # переноса не применяются. Воспользуйся круглыми скобками :)
            return f'Сегодня можно съесть что-нибудь' \
                   f' ещё, но с общей калорийностью не более {x} кКал'
        else:
            # Здесь круглые скобки избыточны - будет работать и без них :)
            return('Хватит есть!')


class CashCalculator(Calculator):
    USD_RATE = float(60)  # Курс доллар США.
    EURO_RATE = float(70)  # Курс Евро.

    def get_today_cash_remained(self, currency,
                                # nit: не самый удачный перенос. Я бы перенес
                                # все начиная с открытой скобки

                                # Названия аргументов функции мы пишем с
                                # маленькой буквы.

                                # Так же мы создали эти переменные в самом
                                # классе, поэтому имеем доступ к ним через
                                # self, а значит, можем не передавать их в
                                # саму функцию.
                                USD_RATE=USD_RATE, EURO_RATE=EURO_RATE):
        currency_type = currency
        cash_remained = self.limit - self.get_today_stats()

        # У нас есть 3 типа валюты: usd, eur, rub. У них есть курс к рублю и
        # наименование (руб, USD, Euro). Мы можем использовать словарик,
        # ключами которого будет тип (currency), а в качестве значений
        # передать курс и общепринятое наименование.
        # Подумай как это можно сделать.
        # Это позволит избавиться от if'ов с определением валюты и курса,
        # а так же даст возможность расширения нашего валютного ассортимента,
        # без дополнительных elif'ов.
        if currency == 'usd':
            cash_remained /= USD_RATE
            currency_type = 'USD'
        elif currency_type == 'eur':
            cash_remained /= EURO_RATE
            currency_type = 'Euro'
        elif currency_type == 'rub':
            # а вот тут ошибка (даже две :) ), во-первых, ты сравниваешь, а не
            # присваиваешь, во-вторых, остаток приравниваешь к нулю, этой
            # переменной тут быть не должно, нужно использовать то, что есть
            # выше.
            cash_remained == 1.00
            currency_type = 'руб'
        if cash_remained > 0:
            return (
                f'На сегодня осталось {round(cash_remained, 2)} '
                f'{currency_type}'
            )
        elif cash_remained == 0:
            return 'Денег нет, держись'
        elif cash_remained < 0:
            # Бэкслеши не используем, заворачиваем в круглые скобки

            # В этом месте ты используешь устаревший метод (хоть и имеющий
            # право на жизнь и имеющий преимещества) работы со строками -
            # .format(), хотя в других местах используешь f-string.
            # Это не очень хорошо, т.к. это нарушает консистентность
            # кода (используем разные инструменты для решения задач, что может
            # запутать читающего и заставить его искать скрытые смыслы там,
            # где их нет)
            return 'Денег нет, держись:' \
                   ' твой долг - {0:.2f} {1}'.format(-cash_remained,
                                                     currency_type)

    # В родительском классе у тебя уже реализован этот метод, и мы имеем к
    # нему доступ из дочернего класса благодаря наследованию
    def get_week_stats(self):
        super().get_week_stats()
